int gcd(int a, int b)
{
    if (a == 0)
        return b;
    return gcd(b%a, a);
}
int lcm(int a, int b)
{
    return a*b/gcd(a,b);
}

void build(int node, int start, int end)
{
    // If there is only one element in current subarray
    if (start==end)
    {
        tree[node] = arr[start];
        return;
    }
 
    int mid = (start+end)/2;
 
    // build left and right segments
    build(2*node, start, mid);
    build(2*node+1, mid+1, end);
 
    // build the parent
    int left_lcm = tree[2*node];
    int right_lcm = tree[2*node+1];
 
    tree[node] = lcm(left_lcm, right_lcm);
}

int query(int node, int start, int end, int l, int r)
{
    // Completely outside the segment, returning
    // 1 will not affect the lcm;
    if (end<l || start>r)
        return 1;
 
    // completely inside the segment
    if (l<=start && r>=end)
        return tree[node];
 
    // partially inside
    int mid = (start+end)/2;
    int left_lcm = query(2*node, start, mid, l, r);
    int right_lcm = query(2*node+1, mid+1, end, l, r);
    return lcm(left_lcm, right_lcm);
}
